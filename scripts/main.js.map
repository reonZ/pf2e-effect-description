{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/effects.ts","webpack:///./src/main.ts"],"sourcesContent":["export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<TChoices extends Record<string, unknown> | undefined>(\r\n    options: Omit<SettingRegistration<TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown>; name: string }\r\n) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TChoices>(MODULE_ID, name, options as SettingRegistration<TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function localizeTemplate(key: string, { hash }: { hash: Record<string, string> }) {\r\n    return localize(`${key}`, hash)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key: string, { hash }: { hash: Record<string, string> }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n        path: (key: string) => string\r\n        template: (key: string, options: { hash: Record<string, string> }) => string\r\n    }\r\n}\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { localize } from '@utils/foundry/localize'\r\n\r\nexport function renderEffectsPanel(panel: EffectsPanel, html: JQuery) {\r\n    addInstructions(panel, html)\r\n    setEvents(html, panel)\r\n}\r\n\r\nfunction addInstructions(panel: EffectsPanel, html: JQuery) {\r\n    const effectPanels = html.find('.effect-item').toArray()\r\n\r\n    const remove = getSetting<boolean>('remove') ? `<p>${localize('remove')}</p>` : ''\r\n    const sheet = getSetting<boolean>('sheet') ? `<p>${localize('sheet')}</p>` : ''\r\n\r\n    for (const effectPanel of effectPanels) {\r\n        const id = effectPanel.dataset.itemId as string\r\n        const effect = panel.actor?.items.get(id) as Embedded<EffectPF2e>\r\n        if (!effect) continue\r\n\r\n        let instructions = ''\r\n        if (!effect.isLocked && effect.badge && effect.badge.type === 'counter') instructions += remove\r\n        instructions += sheet\r\n\r\n        effectPanel.querySelector('.instructions')!.insertAdjacentHTML('beforeend', instructions)\r\n    }\r\n}\r\n\r\nfunction setEvents(html: JQuery, panel: EffectsPanel) {\r\n    html.find('.effect-item[data-item-id] .icon').each((i, icon) => {\r\n        icon.addEventListener('click', event => onClick(event, panel), true)\r\n        icon.addEventListener('contextmenu', event => onContextMenu(event, panel), true)\r\n    })\r\n}\r\n\r\nfunction onContextMenu(event: Event, panel: EffectsPanel) {\r\n    if ((!(event as MouseEvent).shiftKey && !(event as MouseEvent).ctrlKey) || !getSetting('remove')) return\r\n\r\n    const effect = getEffect(event, panel)\r\n    if (!effect || effect.isLocked || !effect.badge || effect.badge.type !== 'counter') return\r\n\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    event.stopImmediatePropagation()\r\n\r\n    effect.delete()\r\n}\r\n\r\nfunction onClick(event: Event, panel: EffectsPanel) {\r\n    if (!(event as MouseEvent).ctrlKey || !getSetting('sheet')) return\r\n\r\n    const effect = getEffect(event, panel)\r\n    if (!effect) return\r\n\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    event.stopImmediatePropagation()\r\n\r\n    effect.sheet.render(true)\r\n}\r\n\r\nfunction getEffect(event: Event, panel: EffectsPanel) {\r\n    const target = (event as MouseEvent).currentTarget as HTMLElement\r\n    const effect = target.closest('.effect-item[data-item-id]') as HTMLElement\r\n    const id = effect.dataset.itemId!\r\n    return panel.actor?.items.get(id) as Embedded<EffectPF2e> | undefined\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { registerSetting } from '@utils/foundry/settings'\r\nimport { renderEffectsPanel } from './effects'\r\n\r\nsetModuleID('pf2e-effect-description')\r\n\r\nHooks.once('init', () => {\r\n    registerSetting({\r\n        name: 'remove',\r\n        type: Boolean,\r\n        default: true,\r\n        scope: 'client',\r\n        config: true,\r\n        onChange: refreshEffectsPanel,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'sheet',\r\n        type: Boolean,\r\n        default: true,\r\n        scope: 'client',\r\n        config: true,\r\n        onChange: refreshEffectsPanel,\r\n    })\r\n})\r\n\r\nHooks.on('renderEffectsPanel', renderEffectsPanel)\r\n\r\nfunction refreshEffectsPanel() {\r\n    game.pf2e.effectPanel?.render()\r\n}\r\n"],"names":["path","join","getSetting","key","game","settings","get","registerSetting","options","name","scope","config","hint","Array","isArray","choices","reduce","choice","register","localize","args","data","i18n","format","getEffect","event","panel","id","currentTarget","closest","dataset","itemId","actor","items","refreshEffectsPanel","pf2e","effectPanel","render","isSystem","setModuleID","Hooks","once","type","Boolean","default","onChange","on","html","effectPanels","find","toArray","remove","sheet","effect","instructions","isLocked","badge","querySelector","insertAdjacentHTML","addInstructions","each","i","icon","addEventListener","ctrlKey","preventDefault","stopPropagation","stopImmediatePropagation","onClick","shiftKey","delete","onContextMenu","setEvents"],"sourceRoot":""}